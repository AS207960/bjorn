"""
Django settings for bjorn_test_ca project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import cryptography.x509
import datetime
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-pnj^v^n%0t+p2%6rp86f1km31-m%+_*ey3xt)w(yf_b-cbz3az'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_grpc',
    'bjorn'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bjorn_test_ca.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bjorn_test_ca.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

GRPCSERVER = {
    'servicers': ['bjorn.grpc.grpc_hook'],
    'interceptors': [],
    'maximum_concurrent_rpcs': None,
    'options': [],
}

with open(BASE_DIR / "ca-certs" / "root.pem", "rb") as root:
    ROOT_CA_CERT = cryptography.x509.load_pem_x509_certificate(root.read())

with open(BASE_DIR / "ca-certs" / "intermediate-crt.pem", "rb") as intermediate:
    INTERMEDIATE_CA_CERT = cryptography.x509.load_pem_x509_certificate(intermediate.read())

CT_LOGS = [{
    "url": "https://ct.googleapis.com/logs/crucible",
    "expiry_range": None,
}, {
    "url": "https://ct.googleapis.com/testtube",
    "expiry_range": None,
}, {
    "url": "https://ct.googleapis.com/logs/solera2018",
    "expiry_range": {
        "start": datetime.datetime(year=2018, month=1, day=1, hour=0, minute=0, second=0),
        "end": datetime.datetime(year=2019, month=1, day=1, hour=0, minute=0, second=0),
    },
}, {
    "url": "https://ct.googleapis.com/logs/solera2019",
    "expiry_range": {
        "start": datetime.datetime(year=2019, month=1, day=1, hour=0, minute=0, second=0),
        "end": datetime.datetime(year=2020, month=1, day=1, hour=0, minute=0, second=0),
    },
}, {
    "url": "https://ct.googleapis.com/logs/solera2020",
    "expiry_range": {
        "start": datetime.datetime(year=2020, month=1, day=1, hour=0, minute=0, second=0),
        "end": datetime.datetime(year=2021, month=1, day=1, hour=0, minute=0, second=0),
    },
}, {
    "url": "https://ct.googleapis.com/logs/solera2021",
    "expiry_range": {
        "start": datetime.datetime(year=2021, month=1, day=1, hour=0, minute=0, second=0),
        "end": datetime.datetime(year=2022, month=1, day=1, hour=0, minute=0, second=0),
    },
}, {
    "url": "https://ct.googleapis.com/logs/solera2022",
    "expiry_range": {
        "start": datetime.datetime(year=2022, month=1, day=1, hour=0, minute=0, second=0),
        "end": datetime.datetime(year=2023, month=1, day=1, hour=0, minute=0, second=0),
    },
}, {
    "url": "https://ct.googleapis.com/logs/solera2023",
    "expiry_range": {
        "start": datetime.datetime(year=2023, month=1, day=1, hour=0, minute=0, second=0),
        "end": datetime.datetime(year=2024, month=1, day=1, hour=0, minute=0, second=0),
    },
}]
